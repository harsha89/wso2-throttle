Index: src/main/java/org/wso2/carbon/throttle/core/CallerContext.java
===================================================================
--- src/main/java/org/wso2/carbon/throttle/core/CallerContext.java	(revision 33376)
+++ src/main/java/org/wso2/carbon/throttle/core/CallerContext.java	(working copy)
@@ -18,10 +18,13 @@
 
 package org.wso2.carbon.throttle.core;
 
+import com.hazelcast.core.IAtomicLong;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.wso2.carbon.throttle.core.internal.ThrottleServiceDataHolder;
+
 import java.io.Serializable;
-import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicLong;
 
 /**
  * Contains all runtime data for a particular remote caller.
@@ -40,16 +43,25 @@
     /* The nextTimeWindow - beginning of next unit time period- end of current unit time period  */
     private long nextTimeWindow = 0;
     /* The globalCount to keep track number of request */
-    private AtomicInteger globalCount = new AtomicInteger(0);
+    private AtomicLong globalCount = new AtomicLong(0);
 
     /**
      * Count to keep track of local (specific to this node) number of requests
      */
-    private AtomicInteger localCount = new AtomicInteger(0);
+    private AtomicLong localCount = new AtomicLong(0);
 
     /* The Id of caller */
     private String ID;
 
+	/**
+	 * Return hazelcast shared counter for this caller context
+	 *
+	 * @return shared hazelcast current shared counter
+	 */
+	public IAtomicLong getReplicatedCounter() {
+		return ThrottleServiceDataHolder.getInstance().getHazelCastInstance().getAtomicLong(this.ID);
+	}
+
     public CallerContext clone() throws CloneNotSupportedException {
         super.clone();
         CallerContext clone = new CallerContext(this.ID) {
@@ -61,8 +73,8 @@
         clone.nextAccessTime = this.nextAccessTime;
         clone.firstAccessTime = this.firstAccessTime;
         clone.nextTimeWindow = this.nextTimeWindow;
-        clone.globalCount = new AtomicInteger(this.globalCount.intValue());
-        clone.localCount = new AtomicInteger(this.localCount.intValue());
+        clone.globalCount = new AtomicLong(this.globalCount.longValue());
+        clone.localCount = new AtomicLong(this.localCount.longValue());
 
         localCount.set(0);
         return clone;
@@ -94,10 +106,22 @@
      * @param currentTime     -The system current time in milliseconds
      */
     private void initAccess(CallerConfiguration configuration, ThrottleContext throttleContext, long currentTime) {
-        this.firstAccessTime = currentTime;  // set the first access time
-        // the end of this time window
-        this.nextTimeWindow = currentTime + configuration.getUnitTime();
-        throttleContext.addCallerContext(this, ID); // register this in the throttle
+	    synchronized(ID.intern()) {
+		    if(throttleContext.getCallerContext(this.ID) == null) {
+			    long firstAccess = SharedTimeStampManager.getSharedTimestamp(this.ID);
+			    if(firstAccess > 0) {
+				    this.firstAccessTime = firstAccess;
+				    this.nextTimeWindow = this.firstAccessTime + configuration.getUnitTime();
+				    this.setGlobalCounter(SharedCounterManager.getDistributedCounter(this.ID));
+			    } else {
+				    SharedTimeStampManager.setSharedTimestamp(this.ID, this.firstAccessTime);
+				    this.firstAccessTime = currentTime;
+				    this.nextTimeWindow = currentTime + configuration.getUnitTime();
+				    this.setGlobalCounter(SharedCounterManager.getDistributedCounter(this.ID));
+			    }
+			    throttleContext.addCallerContext(this, this.ID);
+		    }
+	    }
     }
 
     /**
@@ -112,13 +136,15 @@
         boolean canAccess = false;
         int maxRequest = configuration.getMaximumRequestPerUnitTime();
         if (!(maxRequest == 0)) {
-            if (this.globalCount.get() <= maxRequest - 1) {    //If the globalCount is less than max request
+            if ((this.globalCount.get() + this.localCount.get()) <= (maxRequest - 1)) {    //If the globalCount is less than max request
                 if (log.isDebugEnabled()) {
-                    log.debug("Access allowed :: " + (maxRequest - this.globalCount.get())
-                            + " of available of " + maxRequest + " connections");
+	                log.debug("CallerContext Checking access if unit time is not over and less than max count>> Access "
+	                          + "allowed=" + (maxRequest - this.globalCount.get()) + " available=" + maxRequest + " key="
+	                          + this.getID() + " currentGlobalCount=" + globalCount + " currentTime=" + currentTime + " "
+	                          + "nextTimeWindow=" + this.nextTimeWindow + " currentLocalCount=" + localCount + " Tier="
+	                          + configuration.getID() + " nextAccessTime=" + this.nextAccessTime);
                 }
                 canAccess = true;     // can continue access
-                this.globalCount.incrementAndGet();
                 this.localCount.incrementAndGet();
                 // Send the current state to others (clustered env)
                 throttleContext.flushCallerContext(this, ID);
@@ -131,8 +157,7 @@
                     long prohibitTime = configuration.getProhibitTimePeriod();
                     if (prohibitTime == 0) {
                         //prohibit access until unit time period is over
-                        this.nextAccessTime = this.firstAccessTime +
-                                configuration.getUnitTime();
+                        this.nextAccessTime = this.firstAccessTime + configuration.getUnitTime();
                     } else {
                         //if there is a prohibit time period in configuration ,then
                         //set it as prohibit period
@@ -149,11 +174,14 @@
                 } else {
                     // else , if the caller has already prohibit and prohibit
                     // time period has already over
-                    if (this.nextAccessTime
-                            <= currentTime) {
+                    if (this.nextAccessTime <= currentTime) {
                         if (log.isDebugEnabled()) {
-                            log.debug("Access allowed :: " + (maxRequest)
-                                    + " of available of " + maxRequest + " connections");
+	                        log.debug("CallerContext Checking access if unit time is not over before time window exceed >> "
+	                                  + "Access allowed=" + (maxRequest - this.globalCount.get()) + " available=" +
+	                                  maxRequest + " key=" + this.getID() + " currentGlobalCount=" + globalCount
+	                                  + " currentTime=" + currentTime + " " + "nextTimeWindow=" + this.nextTimeWindow
+	                                  + " currentLocalCount=" + localCount + " " + "Tier=" + configuration.getID()
+	                                  + " nextAccessTime=" + this.nextAccessTime);
                         }
                         // remove previous caller context
                         if (this.nextTimeWindow != 0) {
@@ -162,7 +190,18 @@
                         // reset the states so that, this is the first access
                         this.nextAccessTime = 0;
                         canAccess = true;
-                        this.globalCount.set(1);// can access the system   and this is same as first access
+	                    //TODO HANDLE CAREFULLY THIS IS A FIRST ACCESS MAYBE TIME SKEW
+	                    synchronized (ID.intern()) {
+		                    long timestamp = SharedTimeStampManager.getSharedTimestamp(ID);
+		                    if (timestamp == firstAccessTime || timestamp == 0) {//This means no one reset it yet
+			                    SharedTimeStampManager.setSharedTimestamp(ID, currentTime);
+			                    SharedCounterManager.setDistributedCounter(ID, 0);
+		                    } else {
+			                    currentTime = SharedTimeStampManager.getSharedTimestamp(ID);
+		                    }
+	                    }
+                        this.globalCount.set(0);// can access the system   and this is same as first access
+	                    this.localCount.set(1);
                         this.firstAccessTime = currentTime;
                         this.nextTimeWindow = currentTime + configuration.getUnitTime();
                         // registers caller and send the current state to others (clustered env)
@@ -197,32 +236,55 @@
         // if the unit time period (session time) has just over
         int maxRequest = configuration.getMaximumRequestPerUnitTime();
         if (!(maxRequest == 0)) {
-            if (this.globalCount.get() <= maxRequest - 1) {
+            if ((this.globalCount.get() + this.localCount.get())<= (maxRequest - 1)) {
                 if (this.nextTimeWindow != 0) {
                     // Removes and sends the current state to others  (clustered env)
+	                this.resetLocalCounter();
+	                this.resetGlobalCounter();
                     throttleContext.removeAndFlushCaller(ID);
                 }
-                canAccess = true; // this is bonus access
-                //next time callers can access as a new one
+	            if (log.isDebugEnabled()) {
+		            log.debug("CallerContext Checking access if unit time over next time window>> Access allowed=" +
+		                      (maxRequest - this.globalCount.get()) + " available=" + maxRequest + " key=" + this.getID()
+		                      + " currentGlobalCount=" + globalCount + " currentTime=" + currentTime + " nextTimeWindow="
+		                      + this.nextTimeWindow +
+		                      " currentLocalCount=" + localCount + " Tier=" + configuration.getID() + " nextAccessTime="
+		                      + this.nextAccessTime);
+	            }
+	            canAccess = true; // this is bonus access
+	            //next time callers can access as a new one
             } else {
-                // if number of access for a unit time has just been greater than MAX
-                // now same as a new session
-                // OR
-                //  if caller in prohibit session  and prohibit period has just over
-                if ((this.nextAccessTime == 0) ||
-                        (this.nextAccessTime <= currentTime)) {
+	            // if number of access for a unit time has just been greater than MAX now same as a new session
+	            // OR if caller in prohibit session  and prohibit period has just over
+	            if ((this.nextAccessTime == 0) || (this.nextAccessTime <= currentTime)) {
                     if (log.isDebugEnabled()) {
-                        log.debug("Access allowed :: " + (maxRequest) + " of available of "
-                                + maxRequest + " connections");
+	                    log.info("CallerContext Checking access if unit time over>> Access allowed=" +
+	                             (maxRequest - this.globalCount.get()) + " available=" + maxRequest + " key="+this.getID()
+	                             +" currentGlobalCount=" + globalCount + " currentTime=" + currentTime+" nextTimeWindow="+this.nextTimeWindow +
+	                             " currentLocalCount=" + localCount + " Tier="+ configuration.getID()+" nextAccessTime="
+	                             + this.nextAccessTime);
                     }
                     //remove previous callercontext instance
                     if (this.nextTimeWindow != 0) {
                         throttleContext.removeCallerContext(ID);
                     }
                     // reset the states so that, this is the first access
+
                     this.nextAccessTime = 0;
                     canAccess = true;
-                    this.globalCount.set(1);// can access the system   and this is same as first Access
+
+		            //TODO HANDLE CAREFULLY THIS IS A FIRST ACCESS MAYBE USE TIME SKEW DISCUSS
+					synchronized (ID.intern()) {
+						if (SharedTimeStampManager.getSharedTimestamp(ID) == firstAccessTime) {
+							SharedTimeStampManager.setSharedTimestamp(ID, currentTime);
+							SharedCounterManager.setDistributedCounter(ID, 0);
+						} else {
+							currentTime = SharedTimeStampManager.getSharedTimestamp(ID);
+						}
+					}
+
+		            this.globalCount.set(0);// can access the system   and this is same as first access
+		            this.localCount.set(1);
                     this.firstAccessTime = currentTime;
                     this.nextTimeWindow = currentTime + configuration.getUnitTime();
                     // registers caller and send the current state to others (clustered env)
@@ -266,7 +328,7 @@
 
         int maxRequest = configuration.getMaximumRequestPerUnitTime();
         if (!(maxRequest == 0)) {
-            if (this.globalCount.get() <= maxRequest - 1) {
+            if ((this.globalCount.get() + this.localCount.get()) <= (maxRequest - 1)) {
                 if (this.nextTimeWindow != 0) {
                     if (log.isDebugEnabled()) {
                         log.debug("Removing caller with id " + this.ID);
@@ -280,8 +342,7 @@
                 // now same as a new session
                 // OR
                 //  if caller in prohibit session  and prohibit period has just over
-                if ((this.nextAccessTime == 0) ||
-                        (this.nextAccessTime <= currentTime)) {
+                if ((this.nextAccessTime == 0) || (this.nextAccessTime <= currentTime)) {
                     if (this.nextTimeWindow != 0) {
                         if (log.isDebugEnabled()) {
                             log.debug("Removing caller with id " + this.ID);
@@ -351,15 +412,15 @@
         globalCount.addAndGet(incrementBy);
     }
 
-    public int getGlobalCounter() {
+    public long getGlobalCounter() {
         return globalCount.get();
     }
 
-    public void setGlobalCounter(int counter){
+    public void setGlobalCounter(long counter){
         globalCount.set(counter);
     }
 
-    public int getLocalCounter(){
+    public long getLocalCounter(){
         return localCount.get();
     }
 
@@ -367,6 +428,9 @@
         localCount.set(0);
     }
 
+	public void resetGlobalCounter(){
+		globalCount.set(0);
+	}
     /**
      * Gets type of throttle that this caller belong  ex : ip/domain
      *
@@ -374,4 +438,4 @@
      */
     public abstract int getType();
 
-}
\ No newline at end of file
+}
Index: src/main/java/org/wso2/carbon/throttle/core/SharedCounterManager.java
===================================================================
--- src/main/java/org/wso2/carbon/throttle/core/SharedCounterManager.java	(revision 0)
+++ src/main/java/org/wso2/carbon/throttle/core/SharedCounterManager.java	(working copy)
@@ -0,0 +1,80 @@
+/*
+*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+*
+*  WSO2 Inc. licenses this file to you under the Apache License,
+*  Version 2.0 (the "License"); you may not use this file except
+*  in compliance with the License.
+*  You may obtain a copy of the License at
+*
+*    http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing,
+* software distributed under the License is distributed on an
+* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+* KIND, either express or implied.  See the License for the
+* specific language governing permissions and limitations
+* under the License.
+*/
+package org.wso2.carbon.throttle.core;
+
+import com.hazelcast.core.HazelcastInstance;
+import org.wso2.carbon.throttle.core.internal.ThrottleServiceDataHolder;
+
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+
+public class SharedCounterManager {
+
+	private static Map<String, Long> counters= new ConcurrentHashMap<String, Long>();//Locally managed counters map for non clustered environment
+	/**
+	 * Return hazelcast shared counter for this caller context
+	 *
+	 * @return shared hazelcast current shared counter
+	 */
+	public static long getDistributedCounter(String id) {
+		HazelcastInstance hazelcastInstance = getHazelcastInstance();
+		if(hazelcastInstance != null) {
+			return hazelcastInstance.getAtomicLong(id).get();
+		} else {
+			Long counter = counters.get(id);
+			if(counter != null) {
+				return counter;
+			}
+			return 0;
+		}
+	}
+
+	public static void setDistributedCounter(String id, long value) {
+		HazelcastInstance hazelcastInstance = getHazelcastInstance();
+		if(hazelcastInstance != null) {
+			hazelcastInstance.getAtomicLong(id).set(value);
+		} else {
+			counters.put(id, value);
+		}
+	}
+
+	public static long addAndGetDistributedCounter(String id, long value) {
+		HazelcastInstance hazelcastInstance = getHazelcastInstance();
+		if(hazelcastInstance != null) {
+			return hazelcastInstance.getAtomicLong(id).addAndGet(value);
+		} else {
+			long currentCount = counters.get(id);
+			long updatedCount = currentCount + value;
+			counters.put(id, updatedCount);
+			return updatedCount;
+		}
+	}
+
+	public static void removeCounter(String id) {
+		HazelcastInstance hazelcastInstance = getHazelcastInstance();
+		if(hazelcastInstance != null) {
+			hazelcastInstance.getAtomicLong(id).destroy();
+		} else {
+			counters.remove(id);
+		}
+	}
+
+	private static HazelcastInstance getHazelcastInstance() {
+		return ThrottleServiceDataHolder.getInstance().getHazelCastInstance();
+	}
+}
Index: src/main/java/org/wso2/carbon/throttle/core/SharedTimeStampManager.java
===================================================================
--- src/main/java/org/wso2/carbon/throttle/core/SharedTimeStampManager.java	(revision 0)
+++ src/main/java/org/wso2/carbon/throttle/core/SharedTimeStampManager.java	(working copy)
@@ -0,0 +1,67 @@
+/*
+*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+*
+*  WSO2 Inc. licenses this file to you under the Apache License,
+*  Version 2.0 (the "License"); you may not use this file except
+*  in compliance with the License.
+*  You may obtain a copy of the License at
+*
+*    http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing,
+* software distributed under the License is distributed on an
+* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+* KIND, either express or implied.  See the License for the
+* specific language governing permissions and limitations
+* under the License.
+*/
+package org.wso2.carbon.throttle.core;
+
+import com.hazelcast.core.HazelcastInstance;
+import org.wso2.carbon.throttle.core.internal.ThrottleServiceDataHolder;
+
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+
+public class SharedTimeStampManager {
+
+	private static Map<String, Long> timestamps = new ConcurrentHashMap<String, Long>();//Locally managed time stamps map for non clustered environment
+
+	public static long getSharedTimestamp(String id) {
+		String key = ThrottleConstants.THROTTLE_TIMESTAMP_KEY + id;
+		HazelcastInstance hazelcastInstance = getHazelcastInstance();
+		if(hazelcastInstance != null) {
+			return hazelcastInstance.getAtomicLong(key).get();
+		} else {
+			Long timestamp = timestamps.get(id);
+			if(timestamp != null) {
+				return timestamp;
+			}
+			return 0;
+		}
+	}
+
+	public static void setSharedTimestamp(String id, long timestamp) {
+		String key = ThrottleConstants.THROTTLE_TIMESTAMP_KEY + id;
+		HazelcastInstance hazelcastInstance = getHazelcastInstance();
+		if(hazelcastInstance != null) {
+			hazelcastInstance.getAtomicLong(key).set(timestamp);
+		} else {
+			timestamps.put(id, timestamp);
+		}
+	}
+
+	public static void removeTimestamp(String id) {
+		String key = ThrottleConstants.THROTTLE_TIMESTAMP_KEY + id;
+		HazelcastInstance hazelcastInstance = getHazelcastInstance();
+		if(hazelcastInstance != null) {
+			hazelcastInstance.getAtomicLong(key).destroy();
+		} else {
+			timestamps.remove(key);
+		}
+	}
+
+	private static HazelcastInstance getHazelcastInstance() {
+		return ThrottleServiceDataHolder.getInstance().getHazelCastInstance();
+	}
+}
Index: src/main/java/org/wso2/carbon/throttle/core/ThrottleConstants.java
===================================================================
--- src/main/java/org/wso2/carbon/throttle/core/ThrottleConstants.java	(revision 33376)
+++ src/main/java/org/wso2/carbon/throttle/core/ThrottleConstants.java	(working copy)
@@ -162,4 +162,7 @@
     public static final String DUMMY_TOKEN = "dummy_token_for_token_based_throttle";
 
     public static final String THROTTLE_INFO_KEY = "throttle_info";
+
+    public static final String THROTTLE_TIMESTAMP_KEY = "startedTime-";
+
 }
Index: src/main/java/org/wso2/carbon/throttle/core/ThrottleContext.java
===================================================================
--- src/main/java/org/wso2/carbon/throttle/core/ThrottleContext.java	(revision 33376)
+++ src/main/java/org/wso2/carbon/throttle/core/ThrottleContext.java	(working copy)
@@ -18,16 +18,14 @@
 
 package org.wso2.carbon.throttle.core;
 
-import org.apache.axis2.clustering.ClusteringFault;
-import org.apache.axis2.clustering.state.Replicator;
 import org.apache.axis2.context.ConfigurationContext;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
-import javax.cache.Cache;
-import javax.cache.CacheManager;
-import javax.cache.Caching;
-import java.util.*;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.Map;
+import java.util.SortedMap;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentNavigableMap;
 import java.util.concurrent.ConcurrentSkipListMap;
@@ -350,6 +348,8 @@
      */
     public void removeAndFlushCaller(String id) {
         if (id != null) {
+	        SharedCounterManager.setDistributedCounter(id, 0);
+	        SharedTimeStampManager.setSharedTimestamp(id, 0);
             removeCaller(id);
             replicateCaller(id);
         }
Index: src/main/java/org/wso2/carbon/throttle/core/ThrottleReplicator.java
===================================================================
--- src/main/java/org/wso2/carbon/throttle/core/ThrottleReplicator.java	(revision 33376)
+++ src/main/java/org/wso2/carbon/throttle/core/ThrottleReplicator.java	(working copy)
@@ -18,14 +18,10 @@
 
 package org.wso2.carbon.throttle.core;
 
-import org.apache.axis2.clustering.ClusteringAgent;
-import org.apache.axis2.clustering.ClusteringFault;
 import org.apache.axis2.context.ConfigurationContext;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
-import java.util.ArrayList;
-import java.util.List;
 import java.util.Set;
 import java.util.concurrent.*;
 
@@ -99,54 +95,43 @@
     private class ReplicatorTask implements Runnable {
 
         public void run() {
-            try {
-                if (!set.isEmpty()) {
-                    List<String> keys = new ArrayList<String>();
-                    int keysReplicated = 0;
-                    for (String key : set) {
-                        synchronized (key.intern()) {
-                            keysReplicated++;
-                            keys.add(key);
-                            set.remove(key);
-                            if (keysReplicated >= keysToReplicate) {
-                                if (log.isDebugEnabled()) {
-                                    log.debug("Number of keys to replicated reached maximum " + keysReplicated);
-                                    log.debug("Number of entries to be replicated : " + set.size());
-                                }
-                                break;
-                            }
-                        }
-                    }
-                    try {
+	        try {
+		        if (!set.isEmpty()) {
+			        int keysReplicated = 0;
+			        for (String key : set) {
+				        synchronized (key.intern()) {
+					        keysReplicated++;
+					        set.remove(key);
+					        ThrottleDataHolder dataHolder = (ThrottleDataHolder)
+							        configContext.getProperty(ThrottleConstants.THROTTLE_INFO_KEY);
+					        CallerContext callerContext = dataHolder.getCallerContext(key);
+					        if (callerContext != null && callerContext.getLocalCounter() > 0 &&
+					            callerContext.getNextTimeWindow() > System.currentTimeMillis()) {
+						        String id = callerContext.getID();
+						        //First put local counter to variable and reset it just after it because
+						        //if there are incoming requests coming. the local counter will be updated
+						        //if that happen, reset will cause to miss the additional requests come after
+						        //localcounter value taken into the consideration
+						        long localCounter = callerContext.getLocalCounter();
+						        callerContext.resetLocalCounter();
+						        long distributedCounter = SharedCounterManager.addAndGetDistributedCounter(id, localCounter);
+						        callerContext.setGlobalCounter(distributedCounter);
+						        if (log.isDebugEnabled()) {
+							        log.debug("Increasing shared counter of context : " + callerContext.getID()
+							                  + " replicatedCountAfterUpdate = " + distributedCounter);
+						        }
+					        }
 
-                        ArrayList<String> keysToReplicate = new ArrayList<String>(keys.size());
-                        ArrayList<CallerContext> contextsToReplicate = new ArrayList<CallerContext>(keys.size());
-
-                        if (configContext != null && !keys.isEmpty()) {
-                            ThrottleDataHolder dataHolder = (ThrottleDataHolder)
-                                    configContext.getProperty(ThrottleConstants.THROTTLE_INFO_KEY);
-                            if (dataHolder != null) {
-                                for (String key : keys) {
-                                    CallerContext callerContext = dataHolder.getCallerContext(key);
-                                    if (callerContext != null && callerContext.getLocalCounter() > 0 &&
-                                            callerContext.getNextTimeWindow() > System.currentTimeMillis()) {
-                                        keysToReplicate.add(key);
-                                        contextsToReplicate.add(callerContext.clone());
-                                    }
-                                }
-                            }
-                        }
-                        if(!keysToReplicate.isEmpty()){
-                            ClusteringAgent clusteringAgent = configContext.getAxisConfiguration().getClusteringAgent();
-                            if (clusteringAgent != null) {
-                                log.debug("Replicating "+contextsToReplicate.size()+" CallerContexts in a ClusterMessage.");
-                                clusteringAgent.sendMessage(new ThrottleUpdateClusterMessage(keysToReplicate,contextsToReplicate), true);
-                            }
-                        }
-                    } catch (ClusteringFault e) {
-                        log.error("Could not replicate throttle data", e);
-                    }
-                }
+					        if (keysReplicated >= keysToReplicate) {
+						        if (log.isDebugEnabled()) {
+							        log.debug("Number of keys to replicated reached maximum " + keysReplicated);
+							        log.debug("Number of entries to be replicated : " + set.size());
+						        }
+						        break;
+					        }
+				        }
+			        }
+		        }
             } catch (Throwable t) {
                 log.error("Could not replicate throttle data", t);
             }
Index: src/main/java/org/wso2/carbon/throttle/core/ThrottleUpdateClusterMessage.java
===================================================================
--- src/main/java/org/wso2/carbon/throttle/core/ThrottleUpdateClusterMessage.java	(revision 33376)
+++ src/main/java/org/wso2/carbon/throttle/core/ThrottleUpdateClusterMessage.java	(working copy)
@@ -52,7 +52,7 @@
 
     @Override
     public void execute(ConfigurationContext configContext) throws ClusteringFault {
-        if (log.isDebugEnabled()) {
+        /*if (log.isDebugEnabled()) {
             log.debug("Received ThrottleUpdateClusterMessage "+this.getUuid());
         }
 
@@ -90,8 +90,8 @@
                     }
                 }
                 log.trace("Finished executing ClusterMessage : " + this.getUuid());
-            }
-        }
+            }*/
+        //}
     }
 
 }
Index: src/main/java/org/wso2/carbon/throttle/core/internal/ThrottleServiceComponent.java
===================================================================
--- src/main/java/org/wso2/carbon/throttle/core/internal/ThrottleServiceComponent.java	(revision 0)
+++ src/main/java/org/wso2/carbon/throttle/core/internal/ThrottleServiceComponent.java	(working copy)
@@ -0,0 +1,60 @@
+/*
+* Copyright 2005,2006 WSO2, Inc. http://wso2.com
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*
+*
+*/
+package org.wso2.carbon.throttle.core.internal;
+
+import com.hazelcast.core.HazelcastInstance;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.osgi.service.component.ComponentContext;
+
+/**
+ * This class represents the throttle core declarative service component.
+ *
+ * @scr.component name="throttle.core.services" immediate="true"
+ * @scr.reference name="hazelcast.instance.service"
+ * interface="com.hazelcast.core.HazelcastInstance"
+ * cardinality="0..1"
+ * policy="dynamic"
+ * bind="setHazelcastInstance"
+ * unbind="unsetHazelcastInstance"
+ */
+public class ThrottleServiceComponent {
+
+	private static final Log log  = LogFactory.getLog(ThrottleServiceComponent.class.getName());
+
+	protected void activate(ComponentContext context) {
+		log.debug("Activating throttle core service component");
+	}
+
+	protected void deactivate(ComponentContext ctx) {
+		log.debug("Deactivating throttle core service component");
+	}
+
+	/**
+	 * Access Hazelcast Instance, which is exposed as an OSGI service.
+	 *
+	 * @param hazelcastInstance hazelcastInstance found from the OSGI service
+	 */
+	protected void setHazelcastInstance(HazelcastInstance hazelcastInstance) {
+		ThrottleServiceDataHolder.getInstance().setHazelCastInstance(hazelcastInstance);
+	}
+
+	protected void unsetHazelcastInstance(HazelcastInstance hazelcastInstance) {
+		ThrottleServiceDataHolder.getInstance().setHazelCastInstance(null);
+	}
+}
Index: src/main/java/org/wso2/carbon/throttle/core/internal/ThrottleServiceDataHolder.java
===================================================================
--- src/main/java/org/wso2/carbon/throttle/core/internal/ThrottleServiceDataHolder.java	(revision 0)
+++ src/main/java/org/wso2/carbon/throttle/core/internal/ThrottleServiceDataHolder.java	(working copy)
@@ -0,0 +1,41 @@
+/*
+* Copyright 2005,2006 WSO2, Inc. http://wso2.com
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*
+*
+*/
+package org.wso2.carbon.throttle.core.internal;
+
+import com.hazelcast.core.HazelcastInstance;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+public class ThrottleServiceDataHolder {
+	private static final Log log  = LogFactory.getLog(ThrottleServiceDataHolder.class.getName());
+	private HazelcastInstance hazelcastInstance = null;
+
+	private static ThrottleServiceDataHolder thisInstance = new ThrottleServiceDataHolder();
+
+	public static ThrottleServiceDataHolder getInstance() {
+		return thisInstance;
+	}
+
+	public HazelcastInstance getHazelCastInstance() {
+		return this.hazelcastInstance;
+	}
+
+	public void setHazelCastInstance(HazelcastInstance hazelCastInstance) {
+		this.hazelcastInstance = hazelCastInstance;
+	}
+}
